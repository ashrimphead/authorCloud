<?php
// $Id: vbo_contextmenu.module,v 1.1.2.2 2010/01/14 12:55:09 jide Exp $

/**
 * @file
 * Provides a context menu for Views Bulk Operations.
 */
 
/**
 * Implementation of hook_menu().
 */
function vbo_contextmenu_menu() {
  $items = array();
  $items['admin/settings/vbo_contextmenu'] = array(
  	'title' => 'VBO Context Menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vbo_contextmenu_settings_form'),
    'access arguments' => array('administer views'), 
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}
 
/**
 * Menu callback.
 */
function vbo_contextmenu_settings_form(&$form_state) {
	$form = array();
	$form['vbo_hide_form'] = array(
		'#type' => 'radio',
		'#title' => t('Hide Views Bulk Operations form'),
		'#default_value' => '',
	);
	return system_settings_form($form);
}

/**
 * Implementation of hook_views_pre_render().
 */
function vbo_contextmenu_views_pre_render(&$view) {
	$style = $view->display_handler->get_plugin();
	if (!$style instanceof views_bulk_operations_plugin_style || !$style->options['vbo_contextmenu']['enabled']) {
		return;
	}
	$options = $view->style_plugin->get_selected_operations();
	$path = vbo_contextmenu_get_path('jquery.contextMenu');
	$output = theme('vbo_contextmenu', $options);
	drupal_add_css($path .'/jquery.contextMenu.css');
	drupal_add_css(drupal_get_path('module', 'vbo_contextmenu') .'/vbo_contextmenu.css');
	drupal_add_js(array('vbo_contextmenu' => $output), 'setting');
  drupal_add_js($path .'/jquery.contextMenu.js', 'module', 'header', TRUE);
  drupal_add_js(drupal_get_path('module', 'vbo_contextmenu') .'/vbo_contextmenu.js', 'module', 'header', TRUE);
  drupal_add_js(array('vbo_contextmenu_options' => $style->options['vbo_contextmenu']), 'setting');
}

/**
 * Implementation of hook_form_alter().
 */
function vbo_contextmenu_form_alter(&$form, $form_state, $form_id) {
  // Alter display settings form
  if ($form_id == 'views_ui_edit_display_form') {
  	$style = $form_state['view']->display_handler->get_plugin();
  	if ($style instanceof views_bulk_operations_plugin_style) {
			$form['style_options']['vbo_contextmenu'] = array(
				'#type' => 'fieldset',
				'#title' => t('Context menu'),
				'enabled' => array(
					'#type' => 'checkbox',
					'#title' => t('Enable context menu'),
					'#default_value' => $style->options['vbo_contextmenu']['enabled'],
				),
				'hide_form' => array(
					'#type' => 'checkbox',
					'#title' => t('Hide operations form'),
					'#default_value' => $style->options['vbo_contextmenu']['hide_form'],
				),
			);
		}
	}
}

/**
 * Implementation of hook_theme().
 */
function vbo_contextmenu_theme($existing, $type, $theme, $path) {
  return array(
    'vbo_contextmenu' => array(
      'arguments' => array('options' => array()),
    ),
  );
}

/**
 * Generate the HTML output for the context menu.
 *
 * @param array $options
 *   An array of menu items
 *
 * @ingroup themeable
 */
function theme_vbo_contextmenu($options) {
	$output = '<ul class="contextMenu" id="vbo_contextmenu">';
	foreach ($options as $id => $option) {
		$output .= '<li><a href="#'. $id .'">'. $option .'</a></li>';
	}
	$output .= '</ul>';
	return $output;
}

/**
 * Helper function to build paths to libraries.
 * Pure copy of wysiwyg_get_path() from wysiwyg module.
 */
function vbo_contextmenu_get_path($library, $base_path = FALSE) {
  static $libraries;

  if (!isset($libraries)) {
    $libraries = vbo_contextmenu_get_libraries();
  }
  if (!isset($libraries[$library])) {
    // Most often, external libraries can be shared across multiple sites.
    return 'sites/all/libraries/' . $library;
  }

  $path = ($base_path ? base_path() : '');
  $path .= $libraries[$library];

  return $path;
}

/**
 * Return an array of library directories.
 * Pure copy of wysiwyg_get_libraries() from wysiwyg module.
 */
function vbo_contextmenu_get_libraries() {
  global $profile;

  // When this function is called during Drupal's initial installation process,
  // the name of the profile that is about to be installed is stored in the
  // global $profile variable. At all other times, the regular system variable
  // contains the name of the current profile, and we can call variable_get()
  // to determine the profile.
  if (!isset($profile)) {
    $profile = variable_get('install_profile', 'default');
  }

  $directory = 'libraries';
  $searchdir = array();
  $config = conf_path();

  // The 'profiles' directory contains pristine collections of modules and
  // themes as organized by a distribution.  It is pristine in the same way
  // that /modules is pristine for core; users should avoid changing anything
  // there in favor of sites/all or sites/<domain> directories.
  if (file_exists("profiles/$profile/$directory")) {
    $searchdir[] = "profiles/$profile/$directory";
  }

  // Always search sites/all/*.
  $searchdir[] = 'sites/all/' . $directory;

  // Also search sites/<domain>/*.
  if (file_exists("$config/$directory")) {
    $searchdir[] = "$config/$directory";
  }

  // Retrieve list of directories.
  // @todo Core: Allow to scan for directories.
  $directories = array();
  $nomask = array('CVS');
  foreach ($searchdir as $dir) {
    if (is_dir($dir) && $handle = opendir($dir)) {
      while (FALSE !== ($file = readdir($handle))) {
        if (!in_array($file, $nomask) && $file[0] != '.') {
          if (is_dir("$dir/$file")) {
            $directories[$file] = "$dir/$file";
          }
        }
      }
      closedir($handle);
    }
  }

  return $directories;
}